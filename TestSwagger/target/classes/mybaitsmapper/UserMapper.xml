<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.test.mapper.UserConfigMapper" >
    <resultMap id="User" type="com.test.mybaitsenity.User" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="address" property="address" jdbcType="VARCHAR" />
    </resultMap>

    <sql id="Base_Column_List" >
        id ,name ,address
    </sql>

    <!-- 这个方法是我自己加的 -->
    <select id="findAll" resultMap="User">
        select
        <include refid="Base_Column_List" />
        from user
    </select>

    <select id="findbyId" resultMap="User" parameterType="java.lang.Long">
       select
        <include refid="Base_Column_List" />
        FROM   user
        where id  = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
        delete from user
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <insert id="insert" parameterType="com.test.mybaitsenity.User" >
        insert into user (name ,address)
        values (#{name,jdbcType=VARCHAR},#{address,jdbcType=VARCHAR})
    </insert>
    <insert id="insertSelective" parameterType="com.test.mybaitsenity.User" >
        insert into user
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
              id,
            </if>
            <if test="name != null" >
                name,
            </if>
            <if test="address != null" >
                address,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="name != null" >
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="address != null" >
                #{address,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.test.mybaitsenity.User" >
        update user
        <set >
            <if test="name != null" >
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="address != null" >
               address  = #{address,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.test.mybaitsenity.User" >
        update user
        set name = #{name,jdbcType=VARCHAR},
       address = #{address,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <!--这个更高级的配置创建了一个 FIFO 缓存,并每隔 60 秒刷新,存数结果对象或列表的 512 个引用,而且返回的对象被认为是只读的,因此在不同线程中的调用者之间修改它们会 导致冲突-->
    <cache  eviction="FIFO"
             flushInterval="60000"
             size="512"
             readOnly="true"/>
</mapper>